What happens when you initialise a repository? Why do you need to do it?

When we initialise a repository using the command git init, it created a .git directory inside the repository 
The directory now becomes a git repository. We can now track files and their history and do all the git stuff
in this repository. All the metadata about the files present in the directory is stored in the .git directory. 
the . at the beginning of the directory name shows that it is a hidden directory.
It is necessary because git operates only on git repository. it can not operate on any directory. so if we wish to 
use git we have to initialise our directory using git init.

How is the staging area different from working directory and repository? What value do you think it offers?

Working directory is the working directory as the name suggests. 
Repository contains files that are being tracked. Staging area is kind of intermediate between the two.
If we want to selectively commit changes in some files, we can add them to the staging area and then commit .

How can you use the staging area to make sure that you have one commit per logical change?
Staging area is helpful in the scenerios when the logical change that you have made does not involves all the 
files present in the repository. Suppose your logical change involves only one file then you can add the file to 
the staging area and then commit the changes so that only the changes in that one file will be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful in scenerios when we are not exactly doing our main work.. like if we are trying an 
experimental feature or creating other versions of the code or something like that.
Branches helps because they are independent of each other. we can switch between any of them using simple commands 
we can also combine them if the need arisis.  

How do the diagrams help you visualise the branch structure?
In the diagram we have commits that are pointed by different branch labels 
and each commit also points to its parent commit. In the diagram we traces back
until we find a commit with no parent. So
It shows us all the branches and the commits at which branches were created. 
It can also show us branch label points to which commits.

What is the result of merging two branches together? Why do we represent in the diagram the way we do?
Merging two branches together results in combining the features of both the branches.
We get a new commit which have two parents one from each branch.
The merge tool based on the original file and the two commits from each branch decides what features should 
be included in the merged version.
We represent in the diagram in this way because the new commit has two parents, one from each branch.
So every commit in the two branches is reachable from the new commit. 
The branch that is checked out at the time of merging is also gets merged whether we include it in the 
arguments or not. and it is the branch that advances.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros:
We don't have to do merging manually

Cons:
Sometimes it can show conflicts in the most normal situations. Trivial.  